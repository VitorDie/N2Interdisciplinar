import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import math
from collections import deque
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import io

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Simula√ß√£o M/M/c",
    page_icon="üè•",
    layout="wide"
)

class MMcSimulation:
    def __init__(self, inter_arrival_times, service_times, num_servers):
        self.inter_arrival_times = inter_arrival_times
        self.service_times = service_times
        self.num_servers = num_servers
        
        # Calcular taxas a partir dos dados
        self.arrival_rate = 1 / np.mean(inter_arrival_times)  # Œª
        self.service_rate = 1 / np.mean(service_times)        # Œº
        
        # Resultados da simula√ß√£o
        self.results = {
            'customer_arrivals': [],
            'customer_wait_times': [],
            'customer_system_times': [],
            'queue_sizes_over_time': [],
            'time_points': [],
            'server_busy_times': [0] * num_servers
        }
    
    def run_simulation(self):
        """Executa a simula√ß√£o discreta do sistema M/M/c"""
        
        # Criar eventos de chegada
        events = []
        arrival_time = 0
        
        for i, inter_time in enumerate(self.inter_arrival_times):
            arrival_time += inter_time
            events.append({
                'time': arrival_time,
                'type': 'arrival',
                'customer_id': i,
                'service_time': self.service_times[i] if i < len(self.service_times) else np.random.exponential(1/self.service_rate)
            })
        
        # Ordenar eventos por tempo
        events.sort(key=lambda x: x['time'])
        
        # Estado da simula√ß√£o
        current_time = 0
        queue = deque()
        servers = [None] * self.num_servers  # None = livre, dict = ocupado
        
        # Listas para rastrear m√©tricas
        customer_wait_times = []
        customer_system_times = []
        queue_sizes = []
        time_points = []
        server_start_times = [0] * self.num_servers
        
        for event in events:
            current_time = event['time']
            
            # Verificar servidores que terminaram o atendimento
            for i in range(self.num_servers):
                if servers[i] and servers[i]['end_time'] <= current_time:
                    # Servidor terminou - acumular tempo ocupado
                    self.results['server_busy_times'][i] += servers[i]['end_time'] - servers[i]['start_time']
                    servers[i] = None
                    
                    # Se h√° fila, atender pr√≥ximo cliente
                    if queue:
                        next_customer = queue.popleft()
                        start_time = current_time
                        end_time = start_time + next_customer['service_time']
                        
                        servers[i] = {
                            'customer_id': next_customer['customer_id'],
                            'start_time': start_time,
                            'end_time': end_time
                        }
                        
                        # Calcular m√©tricas do cliente que saiu da fila
                        wait_time = start_time - next_customer['arrival_time']
                        system_time = wait_time + next_customer['service_time']
                        
                        customer_wait_times.append(wait_time)
                        customer_system_times.append(system_time)
            
            # Processar chegada
            if event['type'] == 'arrival':
                # Procurar servidor livre
                server_found = False
                for i in range(self.num_servers):
                    if servers[i] is None:
                        # Atendimento imediato
                        start_time = current_time
                        end_time = start_time + event['service_time']
                        
                        servers[i] = {
                            'customer_id': event['customer_id'],
                            'start_time': start_time,
                            'end_time': end_time
                        }
                        
                        # Cliente n√£o esperou
                        customer_wait_times.append(0)
                        customer_system_times.append(event['service_time'])
                        server_found = True
                        break
                
                if not server_found:
                    # Adicionar √† fila
                    queue.append({
                        'customer_id': event['customer_id'],
                        'service_time': event['service_time'],
                        'arrival_time': current_time
                    })
            
            # Registrar estado atual
            queue_sizes.append(len(queue))
            time_points.append(current_time)
        
        # Salvar resultados
        self.results['customer_wait_times'] = customer_wait_times
        self.results['customer_system_times'] = customer_system_times
        self.results['queue_sizes_over_time'] = queue_sizes
        self.results['time_points'] = time_points
        self.results['total_simulation_time'] = current_time
        
        return self.calculate_theoretical_metrics()
    
    def calculate_theoretical_metrics(self):
        """Calcula m√©tricas te√≥ricas do modelo M/M/c"""
        Œª = self.arrival_rate
        Œº = self.service_rate
        c = self.num_servers
        œÅ = Œª / Œº  # Intensidade de tr√°fego por servidor
        
        if Œª >= c * Œº:
            st.error(f"‚ö†Ô∏è Sistema inst√°vel! Œª ({Œª:.3f}) >= c*Œº ({c*Œº:.3f})")
            return None
        
        # P‚ÇÄ - Probabilidade do sistema estar vazio
        sum_part = sum([(œÅ**n) / math.factorial(n) for n in range(c)])
        p0_denominator = sum_part + ((œÅ**c) / math.factorial(c)) * (c * Œº) / (c * Œº - Œª)
        p0 = 1 / p0_denominator
        
        # P_espera - Probabilidade de esperar (fila n√£o vazia)
        p_wait = (p0 * (œÅ**c)) / (math.factorial(c)) * (c * Œº) / (c * Œº - Œª)
        
        # Lq - N√∫mero m√©dio na fila
        lq = (p0 * (œÅ**(c+1))) / (math.factorial(c) * ((c * Œº - Œª)**2) / (c * Œº))
        
        # Wq - Tempo m√©dio de espera na fila
        wq = lq / Œª
        
        # W - Tempo m√©dio no sistema
        w = wq + (1/Œº)
        
        # L - N√∫mero m√©dio no sistema
        l = Œª * w
        
        return {
            'P0': p0,
            'P_espera': p_wait,
            'Lq': lq,
            'Wq': wq,
            'W': w,
            'L': l,
            'lambda': Œª,
            'mu': Œº,
            'rho': œÅ,
            'utilization': Œª / (c * Œº)
        }
    
    def get_server_utilization(self):
        """Calcula utiliza√ß√£o real dos servidores da simula√ß√£o"""
        total_time = self.results['total_simulation_time']
        utilizations = []
        
        for i in range(self.num_servers):
            util = self.results['server_busy_times'][i] / total_time if total_time > 0 else 0
            utilizations.append(util)
        
        return utilizations

def create_plots(simulation, theoretical_metrics):
    """Cria os 3 gr√°ficos solicitados"""
    
    # 1. Tempo de espera por cliente
    fig1 = px.line(
        x=list(range(len(simulation.results['customer_wait_times']))),
        y=simulation.results['customer_wait_times'],
        title="Tempo de Espera por Cliente",
        labels={'x': 'Cliente #', 'y': 'Tempo de Espera (unidades)'},
        template='plotly_white'
    )
    fig1.add_hline(y=theoretical_metrics['Wq'], line_dash="dash", 
                   annotation_text=f"Wq te√≥rico = {theoretical_metrics['Wq']:.3f}")
    
    # 2. Tamanho da fila ao longo do tempo
    fig2 = px.line(
        x=simulation.results['time_points'],
        y=simulation.results['queue_sizes_over_time'],
        title="Tamanho da Fila ao Longo do Tempo",
        labels={'x': 'Tempo', 'y': 'Tamanho da Fila'},
        template='plotly_white'
    )
    fig2.add_hline(y=theoretical_metrics['Lq'], line_dash="dash", 
                   annotation_text=f"Lq te√≥rico = {theoretical_metrics['Lq']:.3f}")
    
    # 3. Tempo de ocupa√ß√£o dos servidores
    server_utils = simulation.get_server_utilization()
    fig3 = px.bar(
        x=[f'Servidor {i+1}' for i in range(len(server_utils))],
        y=[util * 100 for util in server_utils],
        title="Tempo de Ocupa√ß√£o dos Servidores (%)",
        labels={'x': 'Servidor', 'y': 'Ocupa√ß√£o (%)'},
        template='plotly_white'
    )
    fig3.add_hline(y=theoretical_metrics['utilization'] * 100, line_dash="dash", 
                   annotation_text=f"Utiliza√ß√£o te√≥rica = {theoretical_metrics['utilization']*100:.1f}%")
    
    return fig1, fig2, fig3

def generate_report_data(simulation, theoretical_metrics):
    """Gera dados para o relat√≥rio CSV"""
    
    # M√©tricas simuladas
    sim_p0 = len([w for w in simulation.results['customer_wait_times'] if w == 0]) / len(simulation.results['customer_wait_times'])
    sim_p_wait = len([w for w in simulation.results['customer_wait_times'] if w > 0]) / len(simulation.results['customer_wait_times'])
    sim_lq = np.mean(simulation.results['queue_sizes_over_time'])
    sim_wq = np.mean(simulation.results['customer_wait_times'])
    sim_w = np.mean(simulation.results['customer_system_times'])
    sim_l = sim_lq + simulation.num_servers * theoretical_metrics['utilization']
    
    report_data = {
        'M√©trica': ['P‚ÇÄ', 'P_espera', 'Lq', 'Wq', 'W', 'L'],
        'Valor_Te√≥rico': [
            theoretical_metrics['P0'],
            theoretical_metrics['P_espera'],
            theoretical_metrics['Lq'],
            theoretical_metrics['Wq'],
            theoretical_metrics['W'],
            theoretical_metrics['L']
        ],
        'Valor_Simulado': [sim_p0, sim_p_wait, sim_lq, sim_wq, sim_w, sim_l],
        'Diferen√ßa_%': [
            abs(theoretical_metrics['P0'] - sim_p0) / theoretical_metrics['P0'] * 100,
            abs(theoretical_metrics['P_espera'] - sim_p_wait) / theoretical_metrics['P_espera'] * 100 if theoretical_metrics['P_espera'] > 0 else 0,
            abs(theoretical_metrics['Lq'] - sim_lq) / theoretical_metrics['Lq'] * 100 if theoretical_metrics['Lq'] > 0 else 0,
            abs(theoretical_metrics['Wq'] - sim_wq) / theoretical_metrics['Wq'] * 100 if theoretical_metrics['Wq'] > 0 else 0,
            abs(theoretical_metrics['W'] - sim_w) / theoretical_metrics['W'] * 100,
            abs(theoretical_metrics['L'] - sim_l) / theoretical_metrics['L'] * 100
        ]
    }
    
    return pd.DataFrame(report_data)

def analyze_improvements(inter_arrival_times, service_times, current_servers, theoretical_metrics):
    """Analisa melhorias: +1 servidor e atendente mais r√°pido"""
    
    st.subheader("üí° An√°lises Solicitadas")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Vale a pena adicionar mais um servidor?**")
        
        # Simular com +1 servidor
        sim_plus = MMcSimulation(inter_arrival_times, service_times, current_servers + 1)
        metrics_plus = sim_plus.run_simulation()
        
        if metrics_plus:
            reduction_wq = ((theoretical_metrics['Wq'] - metrics_plus['Wq']) / theoretical_metrics['Wq']) * 100
            reduction_lq = ((theoretical_metrics['Lq'] - metrics_plus['Lq']) / theoretical_metrics['Lq']) * 100
            
            st.write(f"üìä **Servidor atual:** {current_servers}")
            st.write(f"üìä **Com +1 servidor:** {current_servers + 1}")
            st.write(f"‚è±Ô∏è **Redu√ß√£o Wq:** {reduction_wq:.1f}%")
            st.write(f"üë• **Redu√ß√£o Lq:** {reduction_lq:.1f}%")
            
            if reduction_wq > 25:
                st.success("‚úÖ **RECOMENDA√á√ÉO: SIM!** Redu√ß√£o significativa nos tempos.")
            elif reduction_wq > 10:
                st.warning("‚ö†Ô∏è **RECOMENDA√á√ÉO: CONSIDERE.** Melhoria moderada.")
            else:
                st.error("‚ùå **RECOMENDA√á√ÉO: N√ÉO.** Melhoria muito pequena.")
    
    with col2:
        st.write("**Qual seria o impacto de um atendente mais r√°pido?**")
        
        # Simular com tempos de servi√ßo 20% menores (atendente 25% mais r√°pido)
        faster_service_times = service_times * 0.8
        sim_faster = MMcSimulation(inter_arrival_times, faster_service_times, current_servers)
        metrics_faster = sim_faster.run_simulation()
        
        if metrics_faster:
            improvement_wq = ((theoretical_metrics['Wq'] - metrics_faster['Wq']) / theoretical_metrics['Wq']) * 100
            improvement_w = ((theoretical_metrics['W'] - metrics_faster['W']) / theoretical_metrics['W']) * 100
            
            st.write(f"üöÄ **Atendente 25% mais r√°pido:**")
            st.write(f"‚è±Ô∏è **Redu√ß√£o Wq:** {improvement_wq:.1f}%")
            st.write(f"üè• **Redu√ß√£o W:** {improvement_w:.1f}%")
            
            if improvement_wq > 20:
                st.success("‚úÖ **IMPACTO: ALTO!** Vale muito a pena investir em treinamento.")
            elif improvement_wq > 10:
                st.info("‚ÑπÔ∏è **IMPACTO: MODERADO.** Melhoria interessante.")
            else:
                st.warning("‚ö†Ô∏è **IMPACTO: BAIXO.** Melhoria pequena.")

# ===== INTERFACE STREAMLIT =====

st.title("üè• Simula√ß√£o de Filas M/M/c")
st.markdown("**Sistema de an√°lise para filas com m√∫ltiplos servidores**")
st.markdown("---")

# Upload do arquivo CSV
st.subheader("üìÅ Carregar Dados")

uploaded_file = st.file_uploader(
    "Fa√ßa upload do arquivo CSV com dados de tempo:",
    type=['csv'],
    help="O arquivo deve conter colunas: 'tempo_entre_chegadas' e 'tempo_atendimento'"
)
if uploaded_file is not None:
    # Ler dados
    try:
        df = pd.read_csv(uploaded_file)
        st.success(f"‚úÖ Arquivo carregado: {len(df)} registros")
        
        # Mostrar preview
        with st.expander("üëÄ Visualizar dados"):
            st.dataframe(df.head(10))
            st.write(f"**Colunas dispon√≠veis:** {list(df.columns)}")
        
        # Selecionar colunas
        col1, col2 = st.columns(2)
        with col1:
            arrival_col = st.selectbox("Coluna tempo entre chegadas:", df.columns)
        with col2:
            service_col = st.selectbox("Coluna tempo de atendimento:", df.columns)
        
        # Extrair dados
        inter_arrival_times = df[arrival_col].dropna().values
        service_times = df[service_col].dropna().values
        
        # Configura√ß√µes da simula√ß√£o
        st.subheader("‚öôÔ∏è Configura√ß√µes")
        num_servers = st.slider("N√∫mero de servidores (c):", 1, 10, 2)
        
        if st.button("üöÄ Executar Simula√ß√£o", type="primary"):
            
            with st.spinner("Executando simula√ß√£o..."):
                
                # Criar e executar simula√ß√£o
                simulation = MMcSimulation(inter_arrival_times, service_times, num_servers)
                theoretical_metrics = simulation.run_simulation()
                
                if theoretical_metrics:
                    
                    # Exibir m√©tricas principais
                    st.subheader("üìä M√©tricas do Sistema")
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("P‚ÇÄ (Sistema Vazio)", f"{theoretical_metrics['P0']:.4f}")
                        st.metric("P_espera (Prob. Espera)", f"{theoretical_metrics['P_espera']:.4f}")
                    
                    with col2:
                        st.metric("Lq (M√©dia na Fila)", f"{theoretical_metrics['Lq']:.3f}")
                        st.metric("Wq (Tempo M√©dio Espera)", f"{theoretical_metrics['Wq']:.3f}")
                    
                    with col3:
                        st.metric("L (M√©dia no Sistema)", f"{theoretical_metrics['L']:.3f}")
                        st.metric("W (Tempo M√©dio Sistema)", f"{theoretical_metrics['W']:.3f}")
                    
                    # Criar gr√°ficos
                    st.subheader("üìà Visualiza√ß√µes")
                    fig1, fig2, fig3 = create_plots(simulation, theoretical_metrics)
                    
                    tab1, tab2, tab3 = st.tabs(["Tempo de Espera", "Tamanho da Fila", "Ocupa√ß√£o Servidores"])
                    
                    with tab1:
                        st.plotly_chart(fig1, use_container_width=True)
                    
                    with tab2:
                        st.plotly_chart(fig2, use_container_width=True)
                    
                    with tab3:
                        st.plotly_chart(fig3, use_container_width=True)
                    
                    # Relat√≥rio detalhado
                    st.subheader("üìã Relat√≥rio Detalhado")
                    report_df = generate_report_data(simulation, theoretical_metrics)
                    st.dataframe(report_df, use_container_width=True)
                    
                    # Download CSV
                    csv_buffer = io.StringIO()
                    report_df.to_csv(csv_buffer, index=False)
                    st.download_button(
                        label="üì• Download resultados.csv",
                        data=csv_buffer.getvalue(),
                        file_name="resultados.csv",
                        mime="text/csv"
                    )
                    
                    # An√°lises
                    analyze_improvements(inter_arrival_times, service_times, num_servers, theoretical_metrics)
    
    except Exception as e:
        st.error(f"‚ùå Erro ao processar arquivo: {str(e)}")

else:
    st.info("üëÜ Fa√ßa upload de um arquivo CSV para come√ßar")
    
    # Exemplo de formato esperado
    st.subheader("üìù Formato do CSV")
    example_data = pd.DataFrame({
        'tempo_entre_chegadas': [2.1, 1.8, 3.2, 2.5, 1.9],
        'tempo_atendimento': [4.2, 3.8, 5.1, 4.7, 3.9]
    })
    st.dataframe(example_data)